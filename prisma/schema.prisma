// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Main product model
model Product {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String
  slug            String            @unique
  description     String            @db.Text
  price           Decimal           @db.Decimal(10, 2)
  salePrice       Decimal?          @db.Decimal(10, 2)
  thumbnails      ProductMedia[]
  downloadCount   Int               @default(0)
  clickCount      Int               @default(0)
  publishedAt     DateTime?
  
  categoryId      String
  category        Category          @relation(fields: [categoryId], references: [id])
  subcategoryId   String?
  subcategory     Subcategory?      @relation(fields: [subcategoryId], references: [id])
  
  // Product type-specific data
  productTypeId   String
  productType     ProductType       @relation(fields: [productTypeId], references: [id])
  productDetails  Json?             // Flexible field for type-specific details
  
  // Stats and KPIs
  reviews         Review[]
  ratings         Rating[]
  productViews    ProductView[]
  sales           OrderItem[]
  tags            ProductTag[]
  
  // Related products
  bonusProducts   ProductBonus[]    @relation("BonusProducts")
  asBonus         ProductBonus[]    @relation("AsBonusProduct")
  
  suggestedForProducts ProductSuggestion[] @relation("SuggestedForProduct")
  suggestedProducts    ProductSuggestion[] @relation("SuggestedProduct")

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([productTypeId])
}

// Category model
model Category {
  id            String       @id @default(uuid())
  name          String       @unique
  slug          String       @unique
  description   String?
  icon          String?      // Icon identifier or URL
  products      Product[]
  subcategories Subcategory[]
}

// Subcategory model
model Subcategory {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products    Product[]

  @@unique([name, categoryId])
  @@index([categoryId])
}

// Product media (thumbnails, images, etc.)
model ProductMedia {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  type      MediaType
  sortOrder Int      @default(0)

  @@index([productId])
}

enum MediaType {
  THUMBNAIL
  BANNER
  SCREENSHOT
  DOCUMENT
}

// Product types (ebook, template, software, app, etc.)
model ProductType {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]
}

// Review model
model Review {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  email     String   // Since there's no user authentication, use email
  name      String?
  text      String   @db.Text
  createdAt DateTime @default(now())
  approved  Boolean  @default(false)

  @@index([productId])
  @@index([email])
}

// Rating model (separate from reviews)
model Rating {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  email     String   // Since there's no user authentication, use email
  value     Int      // Rating value (e.g., 1-5)
  createdAt DateTime @default(now())

  @@unique([productId, email]) // One rating per email per product
  @@index([productId])
}

// Product views for analytics
model ProductView {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  ip        String?  // Optional, for anonymous tracking
  sessionId String?  // Optional, for anonymous tracking
  viewedAt  DateTime @default(now())
  source    String?  // Traffic source

  @@index([productId])
  @@index([sessionId])
}

// Tags for products
model Tag {
  id          String       @id @default(uuid())
  name        String       @unique
  slug        String       @unique
  products    ProductTag[]
}

// Many-to-many relationship between products and tags
model ProductTag {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@index([productId])
  @@index([tagId])
}

// Bonus products relationship
model ProductBonus {
  id              String   @id @default(uuid())
  productId       String
  product         Product  @relation("BonusProducts", fields: [productId], references: [id], onDelete: Cascade)
  bonusProductId  String
  bonusProduct    Product  @relation("AsBonusProduct", fields: [bonusProductId], references: [id], onDelete: Cascade)

  @@unique([productId, bonusProductId])
  @@index([productId])
  @@index([bonusProductId])
}

// Suggested products relationship
model ProductSuggestion {
  id                String   @id @default(uuid())
  productId         String
  product           Product  @relation("SuggestedForProduct", fields: [productId], references: [id], onDelete: Cascade)
  suggestedProductId String
  suggestedProduct  Product  @relation("SuggestedProduct", fields: [suggestedProductId], references: [id], onDelete: Cascade)
  sortOrder         Int      @default(0)

  @@unique([productId, suggestedProductId])
  @@index([productId])
  @@index([suggestedProductId])
}

// Order model for tracking sales
model Order {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  email       String      // Customer email
  name        String?     // Customer name
  phone       String?     // Customer phone
  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  paymentId   String?     // External payment reference
  items       OrderItem[]
  
  // Additional fields for analytics
  source      String?     // Traffic source
  couponCode  String?     // Applied coupon code
  ip          String?     // IP address for fraud detection
  sessionId   String?     // Session ID for tracking
  
  @@index([email])
  @@index([status])
  @@index([sessionId])
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int      @default(1)
  price       Decimal  @db.Decimal(10, 2) // Price at the time of purchase
  
  // Download tracking for digital products
  downloadUrl String?  // Generated download URL
  downloadKey String?  @unique // Unique key for secure downloads
  downloadCount Int    @default(0)
  expiresAt   DateTime? // Optional expiry for download links
  
  @@index([orderId])
  @@index([productId])
  @@index([downloadKey])
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  COMPLETED
}

// Coupon codes
model Coupon {
  id          String      @id @default(uuid())
  code        String      @unique
  description String?
  discountType DiscountType
  discountValue Decimal   @db.Decimal(10, 2)
  minPurchase Decimal?    @db.Decimal(10, 2)
  maxUses     Int?        // Maximum number of uses
  usedCount   Int         @default(0)
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean     @default(true)
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Analytics data
model Analytics {
  id         String      @id @default(uuid())
  date       DateTime    @default(now()) @db.Date
  metric     String      // e.g., "page_views", "downloads", "sales"
  dimension1 String?     // Optional dimension (e.g., "category", "source")
  dimension2 String?     // Optional secondary dimension
  value      Int         // Metric value
  
  @@unique([date, metric, dimension1, dimension2])
  @@index([date])
  @@index([metric])
}

// Email subscriptions for marketing
model EmailSubscription {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  subscribed Boolean   @default(true)
  source    String?   // Where the subscription came from
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?
}
